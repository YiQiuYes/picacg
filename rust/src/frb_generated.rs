// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::types::sort::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.10.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -814440440;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__types__sort__Sort_as_str_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Sort_as_str",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sort>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::types::sort::Sort::as_str(&*api_that_guard);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__types__image_entity__avatar_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "avatar_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::types::image_entity::avatar_default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__utils__client__get_picacg_token_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_picacg_token",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::utils::client::get_picacg_token())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__utils__crypto__hmac_hex_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "hmac_hex",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key = <String>::sse_decode(&mut deserializer);
            let api_str = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::utils::crypto::hmac_hex(
                        &api_key, &api_str,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__init__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::init::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__reqs__comic__picacg_comic_comments_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_comic_comments",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            let api_page = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok =
                            crate::api::reqs::comic::picacg_comic_comments(api_comic_id, api_page)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__comic__picacg_comic_ep_pictures_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_comic_ep_pictures",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            let api_ep_order = <i32>::sse_decode(&mut deserializer);
            let api_page = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok = crate::api::reqs::comic::picacg_comic_ep_pictures(
                            api_comic_id,
                            api_ep_order,
                            api_page,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__comic__picacg_comic_eps_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_comic_eps",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            let api_page = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok =
                            crate::api::reqs::comic::picacg_comic_eps(api_comic_id, api_page)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__comic__picacg_comic_favourite_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_comic_favourite",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sort = <Sort>::sse_decode(&mut deserializer);
            let api_page = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok =
                            crate::api::reqs::comic::picacg_comic_favourite(api_sort, api_page)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__comic__picacg_comic_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_comic_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok =
                            crate::api::reqs::comic::picacg_comic_info(api_comic_id).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__comic__picacg_comic_page_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_comic_page",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_category = <Option<String>>::sse_decode(&mut deserializer);
            let api_tag = <Option<String>>::sse_decode(&mut deserializer);
            let api_creator_id = <Option<String>>::sse_decode(&mut deserializer);
            let api_chinese_team = <Option<String>>::sse_decode(&mut deserializer);
            let api_sort = <Sort>::sse_decode(&mut deserializer);
            let api_page = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok = crate::api::reqs::comic::picacg_comic_page(
                            api_category,
                            api_tag,
                            api_creator_id,
                            api_chinese_team,
                            api_sort,
                            api_page,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__comic__picacg_comic_post_child_comment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_comic_post_child_comment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comment_id = <String>::sse_decode(&mut deserializer);
            let api_content = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok = crate::api::reqs::comic::picacg_comic_post_child_comment(
                            api_comment_id,
                            api_content,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__comic__picacg_comic_post_comment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_comic_post_comment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            let api_content = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok = crate::api::reqs::comic::picacg_comic_post_comment(
                            api_comic_id,
                            api_content,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__comic__picacg_comic_random_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_comic_random",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok = crate::api::reqs::comic::picacg_comic_random().await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__comic__picacg_comic_search_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_comic_search",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_content = <String>::sse_decode(&mut deserializer);
            let api_sort = <Sort>::sse_decode(&mut deserializer);
            let api_page = <i32>::sse_decode(&mut deserializer);
            let api_categories = <Vec<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok = crate::api::reqs::comic::picacg_comic_search(
                            api_content,
                            api_sort,
                            api_page,
                            api_categories,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__comic__picacg_comic_switch_favourite_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_comic_switch_favourite",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok =
                            crate::api::reqs::comic::picacg_comic_switch_favourite(api_comic_id)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__comic__picacg_comic_switch_like_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_comic_switch_like",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_comic_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok =
                            crate::api::reqs::comic::picacg_comic_switch_like(api_comic_id).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__utils__client__picacg_request_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_request",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_method = <String>::sse_decode(&mut deserializer);
            let api_url = <String>::sse_decode(&mut deserializer);
            let api_payload = <Option<String>>::sse_decode(&mut deserializer);
            let api_query = <Option<Vec<(String, String)>>>::sse_decode(&mut deserializer);
            let api_expect_body =
                <Option<crate::api::utils::client::HttpExpectBody>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::utils::client::picacg_request(
                            &api_method,
                            &api_url,
                            api_payload,
                            api_query,
                            api_expect_body,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__user__picacg_user_login_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_user_login",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_username = <String>::sse_decode(&mut deserializer);
            let api_password = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok =
                            crate::api::reqs::user::picacg_user_login(api_username, api_password)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__user__picacg_user_profile_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_user_profile",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok = crate::api::reqs::user::picacg_user_profile().await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__user__picacg_user_punch_in_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_user_punch_in",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok = crate::api::reqs::user::picacg_user_punch_in().await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__reqs__user__picacg_user_register_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "picacg_user_register",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_email = <String>::sse_decode(&mut deserializer);
            let api_password = <String>::sse_decode(&mut deserializer);
            let api_name = <String>::sse_decode(&mut deserializer);
            let api_birthday = <String>::sse_decode(&mut deserializer);
            let api_gender = <String>::sse_decode(&mut deserializer);
            let api_answer1 = <String>::sse_decode(&mut deserializer);
            let api_answer2 = <String>::sse_decode(&mut deserializer);
            let api_answer3 = <String>::sse_decode(&mut deserializer);
            let api_question1 = <String>::sse_decode(&mut deserializer);
            let api_question2 = <String>::sse_decode(&mut deserializer);
            let api_question3 = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::custom_error::CustomError>(
                    (move || async move {
                        let output_ok = crate::api::reqs::user::picacg_user_register(
                            api_email,
                            api_password,
                            api_name,
                            api_birthday,
                            api_gender,
                            api_answer1,
                            api_answer2,
                            api_answer3,
                            api_question1,
                            api_question2,
                            api_question3,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__utils__client__send_request_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_request",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_method = <String>::sse_decode(&mut deserializer);
            let api_url = <String>::sse_decode(&mut deserializer);
            let api_headers = <Option<Vec<(String, String)>>>::sse_decode(&mut deserializer);
            let api_payload = <Option<String>>::sse_decode(&mut deserializer);
            let api_query = <Option<Vec<(String, String)>>>::sse_decode(&mut deserializer);
            let api_expect_body =
                <Option<crate::api::utils::client::HttpExpectBody>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::utils::client::send_request(
                            &api_method,
                            &api_url,
                            api_headers,
                            api_payload,
                            api_query,
                            api_expect_body,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__utils__client__set_picacg_token_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_picacg_token",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_token = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::utils::client::set_picacg_token(api_token);
                })?;
                Ok(output_ok)
            })())
        },
    )
}

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sort>
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for Sort {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sort>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for chrono::DateTime<chrono::Utc> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(
            chrono::DateTime::from_timestamp_micros(inner)
                .expect("invalid or out-of-range datetime")
                .naive_utc(),
            chrono::Utc,
        );
    }
}

impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sort>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::types::action_entity::ActionEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_action = <String>::sse_decode(deserializer);
        return crate::api::types::action_entity::ActionEntity { action: var_action };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::types::comic_comment_entity::ComicCommentEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_content = <String>::sse_decode(deserializer);
        let mut var_user =
            <crate::api::types::comment_user_entity::CommentUserEntity>::sse_decode(deserializer);
        let mut var_isTop = <bool>::sse_decode(deserializer);
        let mut var_hide_ = <bool>::sse_decode(deserializer);
        let mut var_createdAt = <String>::sse_decode(deserializer);
        let mut var_likesCount = <i64>::sse_decode(deserializer);
        let mut var_commentsCount = <i64>::sse_decode(deserializer);
        let mut var_isLiked = <bool>::sse_decode(deserializer);
        let mut var_comic = <String>::sse_decode(deserializer);
        let mut var_game = <String>::sse_decode(deserializer);
        let mut var_parent = <String>::sse_decode(deserializer);
        return crate::api::types::comic_comment_entity::ComicCommentEntity {
            id: var_id,
            content: var_content,
            user: var_user,
            is_top: var_isTop,
            hide: var_hide_,
            created_at: var_createdAt,
            likes_count: var_likesCount,
            comments_count: var_commentsCount,
            is_liked: var_isLiked,
            comic: var_comic,
            game: var_game,
            parent: var_parent,
        };
    }
}

impl SseDecode for crate::api::types::page_data::ComicCommentPageData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_total = <i32>::sse_decode(deserializer);
        let mut var_limit = <i32>::sse_decode(deserializer);
        let mut var_page = <i32>::sse_decode(deserializer);
        let mut var_pages = <i32>::sse_decode(deserializer);
        let mut var_docs =
            <Vec<crate::api::types::comic_comment_entity::ComicCommentEntity>>::sse_decode(
                deserializer,
            );
        return crate::api::types::page_data::ComicCommentPageData {
            total: var_total,
            limit: var_limit,
            page: var_page,
            pages: var_pages,
            docs: var_docs,
        };
    }
}

impl SseDecode for crate::api::types::comic_entity::ComicEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_author = <String>::sse_decode(deserializer);
        let mut var_pagesCount = <i32>::sse_decode(deserializer);
        let mut var_epsCount = <i32>::sse_decode(deserializer);
        let mut var_finished = <bool>::sse_decode(deserializer);
        let mut var_categories = <Vec<String>>::sse_decode(deserializer);
        let mut var_thumb =
            <crate::api::types::image_entity::ImageEntity>::sse_decode(deserializer);
        let mut var_likesCount = <i32>::sse_decode(deserializer);
        let mut var_tags = <Vec<String>>::sse_decode(deserializer);
        let mut var_totalLikes = <i32>::sse_decode(deserializer);
        let mut var_totalViews = <i32>::sse_decode(deserializer);
        return crate::api::types::comic_entity::ComicEntity {
            id: var_id,
            title: var_title,
            author: var_author,
            pages_count: var_pagesCount,
            eps_count: var_epsCount,
            finished: var_finished,
            categories: var_categories,
            thumb: var_thumb,
            likes_count: var_likesCount,
            tags: var_tags,
            total_likes: var_totalLikes,
            total_views: var_totalViews,
        };
    }
}

impl SseDecode for crate::api::types::comic_ep_entity::ComicEpEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_order = <i32>::sse_decode(deserializer);
        let mut var_updatedAt = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        return crate::api::types::comic_ep_entity::ComicEpEntity {
            id: var_id,
            title: var_title,
            order: var_order,
            updated_at: var_updatedAt,
        };
    }
}

impl SseDecode for crate::api::types::page_data::ComicEpPageData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_total = <i32>::sse_decode(deserializer);
        let mut var_limit = <i32>::sse_decode(deserializer);
        let mut var_page = <i32>::sse_decode(deserializer);
        let mut var_pages = <i32>::sse_decode(deserializer);
        let mut var_docs =
            <Vec<crate::api::types::comic_ep_entity::ComicEpEntity>>::sse_decode(deserializer);
        return crate::api::types::page_data::ComicEpPageData {
            total: var_total,
            limit: var_limit,
            page: var_page,
            pages: var_pages,
            docs: var_docs,
        };
    }
}

impl SseDecode for crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_media =
            <crate::api::types::image_entity::ImageEntity>::sse_decode(deserializer);
        return crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity {
            id: var_id,
            media: var_media,
        };
    }
}

impl SseDecode for crate::api::types::page_data::ComicEpPicturePageData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_total = <i32>::sse_decode(deserializer);
        let mut var_limit = <i32>::sse_decode(deserializer);
        let mut var_page = <i32>::sse_decode(deserializer);
        let mut var_pages = <i32>::sse_decode(deserializer);
        let mut var_docs =
            <Vec<crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity>>::sse_decode(
                deserializer,
            );
        return crate::api::types::page_data::ComicEpPicturePageData {
            total: var_total,
            limit: var_limit,
            page: var_page,
            pages: var_pages,
            docs: var_docs,
        };
    }
}

impl SseDecode for crate::api::types::comic_info_entity::ComicInfoEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_author = <String>::sse_decode(deserializer);
        let mut var_pagesCount = <i32>::sse_decode(deserializer);
        let mut var_epsCount = <i32>::sse_decode(deserializer);
        let mut var_finished = <bool>::sse_decode(deserializer);
        let mut var_categories = <Vec<String>>::sse_decode(deserializer);
        let mut var_thumb =
            <crate::api::types::image_entity::ImageEntity>::sse_decode(deserializer);
        let mut var_likesCount = <i32>::sse_decode(deserializer);
        let mut var_creator =
            <crate::api::types::creator_entity::CreatorEntity>::sse_decode(deserializer);
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_chineseTeam = <String>::sse_decode(deserializer);
        let mut var_tags = <Vec<String>>::sse_decode(deserializer);
        let mut var_updatedAt = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_createdAt = <String>::sse_decode(deserializer);
        let mut var_allowDownload = <bool>::sse_decode(deserializer);
        let mut var_viewsCount = <i32>::sse_decode(deserializer);
        let mut var_isLiked = <bool>::sse_decode(deserializer);
        let mut var_commentsCount = <i32>::sse_decode(deserializer);
        return crate::api::types::comic_info_entity::ComicInfoEntity {
            id: var_id,
            title: var_title,
            author: var_author,
            pages_count: var_pagesCount,
            eps_count: var_epsCount,
            finished: var_finished,
            categories: var_categories,
            thumb: var_thumb,
            likes_count: var_likesCount,
            creator: var_creator,
            description: var_description,
            chinese_team: var_chineseTeam,
            tags: var_tags,
            updated_at: var_updatedAt,
            created_at: var_createdAt,
            allow_download: var_allowDownload,
            views_count: var_viewsCount,
            is_liked: var_isLiked,
            comments_count: var_commentsCount,
        };
    }
}

impl SseDecode for crate::api::types::page_data::ComicPageData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_total = <i32>::sse_decode(deserializer);
        let mut var_limit = <i32>::sse_decode(deserializer);
        let mut var_page = <i32>::sse_decode(deserializer);
        let mut var_pages = <i32>::sse_decode(deserializer);
        let mut var_docs =
            <Vec<crate::api::types::comic_entity::ComicEntity>>::sse_decode(deserializer);
        return crate::api::types::page_data::ComicPageData {
            total: var_total,
            limit: var_limit,
            page: var_page,
            pages: var_pages,
            docs: var_docs,
        };
    }
}

impl SseDecode for crate::api::types::comic_search_entity::ComicSearchEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_author = <String>::sse_decode(deserializer);
        let mut var_categories = <Vec<String>>::sse_decode(deserializer);
        let mut var_chineseTeam = <String>::sse_decode(deserializer);
        let mut var_createdAt = <String>::sse_decode(deserializer);
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_finished = <bool>::sse_decode(deserializer);
        let mut var_likesCount = <i64>::sse_decode(deserializer);
        let mut var_tags = <Vec<String>>::sse_decode(deserializer);
        let mut var_thumb =
            <crate::api::types::image_entity::ImageEntity>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_totalLikes = <Option<i64>>::sse_decode(deserializer);
        let mut var_totalViews = <Option<i64>>::sse_decode(deserializer);
        let mut var_updatedAt = <String>::sse_decode(deserializer);
        return crate::api::types::comic_search_entity::ComicSearchEntity {
            id: var_id,
            author: var_author,
            categories: var_categories,
            chinese_team: var_chineseTeam,
            created_at: var_createdAt,
            description: var_description,
            finished: var_finished,
            likes_count: var_likesCount,
            tags: var_tags,
            thumb: var_thumb,
            title: var_title,
            total_likes: var_totalLikes,
            total_views: var_totalViews,
            updated_at: var_updatedAt,
        };
    }
}

impl SseDecode for crate::api::types::page_data::ComicSearchPageData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_total = <i32>::sse_decode(deserializer);
        let mut var_limit = <i32>::sse_decode(deserializer);
        let mut var_page = <i32>::sse_decode(deserializer);
        let mut var_pages = <i32>::sse_decode(deserializer);
        let mut var_docs =
            <Vec<crate::api::types::comic_search_entity::ComicSearchEntity>>::sse_decode(
                deserializer,
            );
        return crate::api::types::page_data::ComicSearchPageData {
            total: var_total,
            limit: var_limit,
            page: var_page,
            pages: var_pages,
            docs: var_docs,
        };
    }
}

impl SseDecode for crate::api::types::comment_user_entity::CommentUserEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_gender = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_verified = <bool>::sse_decode(deserializer);
        let mut var_exp = <i64>::sse_decode(deserializer);
        let mut var_level = <i64>::sse_decode(deserializer);
        let mut var_characters = <Vec<String>>::sse_decode(deserializer);
        let mut var_avatar =
            <crate::api::types::image_entity::ImageEntity>::sse_decode(deserializer);
        let mut var_role = <String>::sse_decode(deserializer);
        return crate::api::types::comment_user_entity::CommentUserEntity {
            id: var_id,
            gender: var_gender,
            name: var_name,
            title: var_title,
            verified: var_verified,
            exp: var_exp,
            level: var_level,
            characters: var_characters,
            avatar: var_avatar,
            role: var_role,
        };
    }
}

impl SseDecode for crate::api::types::creator_entity::CreatorEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_gender = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_verified = <Option<bool>>::sse_decode(deserializer);
        let mut var_exp = <i32>::sse_decode(deserializer);
        let mut var_level = <i32>::sse_decode(deserializer);
        let mut var_characters = <Vec<String>>::sse_decode(deserializer);
        let mut var_avatar =
            <crate::api::types::image_entity::ImageEntity>::sse_decode(deserializer);
        let mut var_slogan = <String>::sse_decode(deserializer);
        let mut var_role = <String>::sse_decode(deserializer);
        let mut var_character = <String>::sse_decode(deserializer);
        return crate::api::types::creator_entity::CreatorEntity {
            id: var_id,
            gender: var_gender,
            name: var_name,
            title: var_title,
            verified: var_verified,
            exp: var_exp,
            level: var_level,
            characters: var_characters,
            avatar: var_avatar,
            slogan: var_slogan,
            role: var_role,
            character: var_character,
        };
    }
}

impl SseDecode for crate::api::error::custom_error::CustomError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_errorCode =
            <crate::api::error::custom_error::CustomErrorType>::sse_decode(deserializer);
        let mut var_errorMessage = <String>::sse_decode(deserializer);
        return crate::api::error::custom_error::CustomError {
            error_code: var_errorCode,
            error_message: var_errorMessage,
        };
    }
}

impl SseDecode for crate::api::error::custom_error::CustomErrorType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::error::custom_error::CustomErrorType::BadRequest,
            1 => crate::api::error::custom_error::CustomErrorType::ParameterError,
            2 => crate::api::error::custom_error::CustomErrorType::ParseJsonError,
            3 => crate::api::error::custom_error::CustomErrorType::UnKnownError,
            4 => crate::api::error::custom_error::CustomErrorType::ParseError,
            _ => unreachable!("Invalid variant for CustomErrorType: {}", inner),
        };
    }
}

impl SseDecode for crate::api::utils::client::HttpExpectBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::utils::client::HttpExpectBody::Text,
            1 => crate::api::utils::client::HttpExpectBody::Bytes,
            _ => unreachable!("Invalid variant for HttpExpectBody: {}", inner),
        };
    }
}

impl SseDecode for crate::api::utils::client::HttpResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_headers = <Vec<(String, String)>>::sse_decode(deserializer);
        let mut var_statusCode = <u16>::sse_decode(deserializer);
        let mut var_body = <crate::api::utils::client::HttpResponseBody>::sse_decode(deserializer);
        return crate::api::utils::client::HttpResponse {
            headers: var_headers,
            status_code: var_statusCode,
            body: var_body,
        };
    }
}

impl SseDecode for crate::api::utils::client::HttpResponseBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::utils::client::HttpResponseBody::Text(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::utils::client::HttpResponseBody::Bytes(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::types::image_entity::ImageEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fileServer = <String>::sse_decode(deserializer);
        let mut var_originalName = <String>::sse_decode(deserializer);
        let mut var_path = <String>::sse_decode(deserializer);
        return crate::api::types::image_entity::ImageEntity {
            file_server: var_fileServer,
            original_name: var_originalName,
            path: var_path,
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::types::comic_comment_entity::ComicCommentEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::types::comic_comment_entity::ComicCommentEntity>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::types::comic_entity::ComicEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::types::comic_entity::ComicEntity>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::types::comic_ep_entity::ComicEpEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::types::comic_ep_entity::ComicEpEntity>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::types::comic_search_entity::ComicSearchEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::types::comic_search_entity::ComicSearchEntity>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::types::login_entity::LoginEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_token = <String>::sse_decode(deserializer);
        return crate::api::types::login_entity::LoginEntity { token: var_token };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::utils::client::HttpExpectBody> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::utils::client::HttpExpectBody>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<(String, String)>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<(String, String)>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::types::profile_entity::ProfileEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_gender = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_verified = <bool>::sse_decode(deserializer);
        let mut var_exp = <i32>::sse_decode(deserializer);
        let mut var_level = <i32>::sse_decode(deserializer);
        let mut var_characters = <Vec<String>>::sse_decode(deserializer);
        let mut var_avatar =
            <crate::api::types::image_entity::ImageEntity>::sse_decode(deserializer);
        let mut var_birthday = <String>::sse_decode(deserializer);
        let mut var_email = <String>::sse_decode(deserializer);
        let mut var_createdAt = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_isPunched = <bool>::sse_decode(deserializer);
        return crate::api::types::profile_entity::ProfileEntity {
            id: var_id,
            gender: var_gender,
            name: var_name,
            title: var_title,
            verified: var_verified,
            exp: var_exp,
            level: var_level,
            characters: var_characters,
            avatar: var_avatar,
            birthday: var_birthday,
            email: var_email,
            created_at: var_createdAt,
            is_punched: var_isPunched,
        };
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__types__sort__Sort_as_str_impl(port, ptr, rust_vec_len, data_len),
        2 => wire__crate__api__types__image_entity__avatar_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        4 => wire__crate__api__utils__crypto__hmac_hex_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__init__init_app_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__api__reqs__comic__picacg_comic_comments_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        7 => wire__crate__api__reqs__comic__picacg_comic_ep_pictures_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        8 => {
            wire__crate__api__reqs__comic__picacg_comic_eps_impl(port, ptr, rust_vec_len, data_len)
        }
        9 => wire__crate__api__reqs__comic__picacg_comic_favourite_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        10 => {
            wire__crate__api__reqs__comic__picacg_comic_info_impl(port, ptr, rust_vec_len, data_len)
        }
        11 => {
            wire__crate__api__reqs__comic__picacg_comic_page_impl(port, ptr, rust_vec_len, data_len)
        }
        12 => wire__crate__api__reqs__comic__picacg_comic_post_child_comment_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        13 => wire__crate__api__reqs__comic__picacg_comic_post_comment_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        14 => wire__crate__api__reqs__comic__picacg_comic_random_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        15 => wire__crate__api__reqs__comic__picacg_comic_search_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        16 => wire__crate__api__reqs__comic__picacg_comic_switch_favourite_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        17 => wire__crate__api__reqs__comic__picacg_comic_switch_like_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        18 => {
            wire__crate__api__utils__client__picacg_request_impl(port, ptr, rust_vec_len, data_len)
        }
        19 => {
            wire__crate__api__reqs__user__picacg_user_login_impl(port, ptr, rust_vec_len, data_len)
        }
        20 => wire__crate__api__reqs__user__picacg_user_profile_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        21 => wire__crate__api__reqs__user__picacg_user_punch_in_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        22 => wire__crate__api__reqs__user__picacg_user_register_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        23 => wire__crate__api__utils__client__send_request_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        3 => wire__crate__api__utils__client__get_picacg_token_impl(ptr, rust_vec_len, data_len),
        24 => wire__crate__api__utils__client__set_picacg_token_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Sort> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Sort> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Sort>> for Sort {
    fn into_into_dart(self) -> FrbWrapper<Sort> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::action_entity::ActionEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.action.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::action_entity::ActionEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::action_entity::ActionEntity>
    for crate::api::types::action_entity::ActionEntity
{
    fn into_into_dart(self) -> crate::api::types::action_entity::ActionEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::comic_comment_entity::ComicCommentEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.content.into_into_dart().into_dart(),
            self.user.into_into_dart().into_dart(),
            self.is_top.into_into_dart().into_dart(),
            self.hide.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.likes_count.into_into_dart().into_dart(),
            self.comments_count.into_into_dart().into_dart(),
            self.is_liked.into_into_dart().into_dart(),
            self.comic.into_into_dart().into_dart(),
            self.game.into_into_dart().into_dart(),
            self.parent.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::comic_comment_entity::ComicCommentEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::comic_comment_entity::ComicCommentEntity>
    for crate::api::types::comic_comment_entity::ComicCommentEntity
{
    fn into_into_dart(self) -> crate::api::types::comic_comment_entity::ComicCommentEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::page_data::ComicCommentPageData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.total.into_into_dart().into_dart(),
            self.limit.into_into_dart().into_dart(),
            self.page.into_into_dart().into_dart(),
            self.pages.into_into_dart().into_dart(),
            self.docs.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::page_data::ComicCommentPageData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::page_data::ComicCommentPageData>
    for crate::api::types::page_data::ComicCommentPageData
{
    fn into_into_dart(self) -> crate::api::types::page_data::ComicCommentPageData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::comic_entity::ComicEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
            self.author.into_into_dart().into_dart(),
            self.pages_count.into_into_dart().into_dart(),
            self.eps_count.into_into_dart().into_dart(),
            self.finished.into_into_dart().into_dart(),
            self.categories.into_into_dart().into_dart(),
            self.thumb.into_into_dart().into_dart(),
            self.likes_count.into_into_dart().into_dart(),
            self.tags.into_into_dart().into_dart(),
            self.total_likes.into_into_dart().into_dart(),
            self.total_views.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::comic_entity::ComicEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::comic_entity::ComicEntity>
    for crate::api::types::comic_entity::ComicEntity
{
    fn into_into_dart(self) -> crate::api::types::comic_entity::ComicEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::comic_ep_entity::ComicEpEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
            self.order.into_into_dart().into_dart(),
            self.updated_at.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::comic_ep_entity::ComicEpEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::comic_ep_entity::ComicEpEntity>
    for crate::api::types::comic_ep_entity::ComicEpEntity
{
    fn into_into_dart(self) -> crate::api::types::comic_ep_entity::ComicEpEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::page_data::ComicEpPageData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.total.into_into_dart().into_dart(),
            self.limit.into_into_dart().into_dart(),
            self.page.into_into_dart().into_dart(),
            self.pages.into_into_dart().into_dart(),
            self.docs.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::page_data::ComicEpPageData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::page_data::ComicEpPageData>
    for crate::api::types::page_data::ComicEpPageData
{
    fn into_into_dart(self) -> crate::api::types::page_data::ComicEpPageData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.media.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity,
    > for crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity
{
    fn into_into_dart(self) -> crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::page_data::ComicEpPicturePageData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.total.into_into_dart().into_dart(),
            self.limit.into_into_dart().into_dart(),
            self.page.into_into_dart().into_dart(),
            self.pages.into_into_dart().into_dart(),
            self.docs.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::page_data::ComicEpPicturePageData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::page_data::ComicEpPicturePageData>
    for crate::api::types::page_data::ComicEpPicturePageData
{
    fn into_into_dart(self) -> crate::api::types::page_data::ComicEpPicturePageData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::comic_info_entity::ComicInfoEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
            self.author.into_into_dart().into_dart(),
            self.pages_count.into_into_dart().into_dart(),
            self.eps_count.into_into_dart().into_dart(),
            self.finished.into_into_dart().into_dart(),
            self.categories.into_into_dart().into_dart(),
            self.thumb.into_into_dart().into_dart(),
            self.likes_count.into_into_dart().into_dart(),
            self.creator.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.chinese_team.into_into_dart().into_dart(),
            self.tags.into_into_dart().into_dart(),
            self.updated_at.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.allow_download.into_into_dart().into_dart(),
            self.views_count.into_into_dart().into_dart(),
            self.is_liked.into_into_dart().into_dart(),
            self.comments_count.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::comic_info_entity::ComicInfoEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::comic_info_entity::ComicInfoEntity>
    for crate::api::types::comic_info_entity::ComicInfoEntity
{
    fn into_into_dart(self) -> crate::api::types::comic_info_entity::ComicInfoEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::page_data::ComicPageData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.total.into_into_dart().into_dart(),
            self.limit.into_into_dart().into_dart(),
            self.page.into_into_dart().into_dart(),
            self.pages.into_into_dart().into_dart(),
            self.docs.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::page_data::ComicPageData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::page_data::ComicPageData>
    for crate::api::types::page_data::ComicPageData
{
    fn into_into_dart(self) -> crate::api::types::page_data::ComicPageData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::comic_search_entity::ComicSearchEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.author.into_into_dart().into_dart(),
            self.categories.into_into_dart().into_dart(),
            self.chinese_team.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.finished.into_into_dart().into_dart(),
            self.likes_count.into_into_dart().into_dart(),
            self.tags.into_into_dart().into_dart(),
            self.thumb.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
            self.total_likes.into_into_dart().into_dart(),
            self.total_views.into_into_dart().into_dart(),
            self.updated_at.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::comic_search_entity::ComicSearchEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::comic_search_entity::ComicSearchEntity>
    for crate::api::types::comic_search_entity::ComicSearchEntity
{
    fn into_into_dart(self) -> crate::api::types::comic_search_entity::ComicSearchEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::page_data::ComicSearchPageData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.total.into_into_dart().into_dart(),
            self.limit.into_into_dart().into_dart(),
            self.page.into_into_dart().into_dart(),
            self.pages.into_into_dart().into_dart(),
            self.docs.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::page_data::ComicSearchPageData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::page_data::ComicSearchPageData>
    for crate::api::types::page_data::ComicSearchPageData
{
    fn into_into_dart(self) -> crate::api::types::page_data::ComicSearchPageData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::comment_user_entity::CommentUserEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.gender.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
            self.verified.into_into_dart().into_dart(),
            self.exp.into_into_dart().into_dart(),
            self.level.into_into_dart().into_dart(),
            self.characters.into_into_dart().into_dart(),
            self.avatar.into_into_dart().into_dart(),
            self.role.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::comment_user_entity::CommentUserEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::comment_user_entity::CommentUserEntity>
    for crate::api::types::comment_user_entity::CommentUserEntity
{
    fn into_into_dart(self) -> crate::api::types::comment_user_entity::CommentUserEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::creator_entity::CreatorEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.gender.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
            self.verified.into_into_dart().into_dart(),
            self.exp.into_into_dart().into_dart(),
            self.level.into_into_dart().into_dart(),
            self.characters.into_into_dart().into_dart(),
            self.avatar.into_into_dart().into_dart(),
            self.slogan.into_into_dart().into_dart(),
            self.role.into_into_dart().into_dart(),
            self.character.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::creator_entity::CreatorEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::creator_entity::CreatorEntity>
    for crate::api::types::creator_entity::CreatorEntity
{
    fn into_into_dart(self) -> crate::api::types::creator_entity::CreatorEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::error::custom_error::CustomError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.error_code.into_into_dart().into_dart(),
            self.error_message.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::error::custom_error::CustomError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::error::custom_error::CustomError>
    for crate::api::error::custom_error::CustomError
{
    fn into_into_dart(self) -> crate::api::error::custom_error::CustomError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::error::custom_error::CustomErrorType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::BadRequest => 0.into_dart(),
            Self::ParameterError => 1.into_dart(),
            Self::ParseJsonError => 2.into_dart(),
            Self::UnKnownError => 3.into_dart(),
            Self::ParseError => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::error::custom_error::CustomErrorType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::error::custom_error::CustomErrorType>
    for crate::api::error::custom_error::CustomErrorType
{
    fn into_into_dart(self) -> crate::api::error::custom_error::CustomErrorType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::utils::client::HttpExpectBody {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Text => 0.into_dart(),
            Self::Bytes => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::utils::client::HttpExpectBody
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::utils::client::HttpExpectBody>
    for crate::api::utils::client::HttpExpectBody
{
    fn into_into_dart(self) -> crate::api::utils::client::HttpExpectBody {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::utils::client::HttpResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.headers.into_into_dart().into_dart(),
            self.status_code.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::utils::client::HttpResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::utils::client::HttpResponse>
    for crate::api::utils::client::HttpResponse
{
    fn into_into_dart(self) -> crate::api::utils::client::HttpResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::utils::client::HttpResponseBody {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::utils::client::HttpResponseBody::Text(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::utils::client::HttpResponseBody::Bytes(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::utils::client::HttpResponseBody
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::utils::client::HttpResponseBody>
    for crate::api::utils::client::HttpResponseBody
{
    fn into_into_dart(self) -> crate::api::utils::client::HttpResponseBody {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::image_entity::ImageEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.file_server.into_into_dart().into_dart(),
            self.original_name.into_into_dart().into_dart(),
            self.path.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::image_entity::ImageEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::image_entity::ImageEntity>
    for crate::api::types::image_entity::ImageEntity
{
    fn into_into_dart(self) -> crate::api::types::image_entity::ImageEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::login_entity::LoginEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.token.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::login_entity::LoginEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::login_entity::LoginEntity>
    for crate::api::types::login_entity::LoginEntity
{
    fn into_into_dart(self) -> crate::api::types::login_entity::LoginEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::profile_entity::ProfileEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.gender.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
            self.verified.into_into_dart().into_dart(),
            self.exp.into_into_dart().into_dart(),
            self.level.into_into_dart().into_dart(),
            self.characters.into_into_dart().into_dart(),
            self.avatar.into_into_dart().into_dart(),
            self.birthday.into_into_dart().into_dart(),
            self.email.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.is_punched.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::profile_entity::ProfileEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::profile_entity::ProfileEntity>
    for crate::api::types::profile_entity::ProfileEntity
{
    fn into_into_dart(self) -> crate::api::types::profile_entity::ProfileEntity {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for Sort {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sort>>>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for chrono::DateTime<chrono::Utc> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.timestamp_micros(), serializer);
    }
}

impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sort>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::types::action_entity::ActionEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.action, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::types::comic_comment_entity::ComicCommentEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.content, serializer);
        <crate::api::types::comment_user_entity::CommentUserEntity>::sse_encode(
            self.user, serializer,
        );
        <bool>::sse_encode(self.is_top, serializer);
        <bool>::sse_encode(self.hide, serializer);
        <String>::sse_encode(self.created_at, serializer);
        <i64>::sse_encode(self.likes_count, serializer);
        <i64>::sse_encode(self.comments_count, serializer);
        <bool>::sse_encode(self.is_liked, serializer);
        <String>::sse_encode(self.comic, serializer);
        <String>::sse_encode(self.game, serializer);
        <String>::sse_encode(self.parent, serializer);
    }
}

impl SseEncode for crate::api::types::page_data::ComicCommentPageData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.total, serializer);
        <i32>::sse_encode(self.limit, serializer);
        <i32>::sse_encode(self.page, serializer);
        <i32>::sse_encode(self.pages, serializer);
        <Vec<crate::api::types::comic_comment_entity::ComicCommentEntity>>::sse_encode(
            self.docs, serializer,
        );
    }
}

impl SseEncode for crate::api::types::comic_entity::ComicEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.title, serializer);
        <String>::sse_encode(self.author, serializer);
        <i32>::sse_encode(self.pages_count, serializer);
        <i32>::sse_encode(self.eps_count, serializer);
        <bool>::sse_encode(self.finished, serializer);
        <Vec<String>>::sse_encode(self.categories, serializer);
        <crate::api::types::image_entity::ImageEntity>::sse_encode(self.thumb, serializer);
        <i32>::sse_encode(self.likes_count, serializer);
        <Vec<String>>::sse_encode(self.tags, serializer);
        <i32>::sse_encode(self.total_likes, serializer);
        <i32>::sse_encode(self.total_views, serializer);
    }
}

impl SseEncode for crate::api::types::comic_ep_entity::ComicEpEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.title, serializer);
        <i32>::sse_encode(self.order, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.updated_at, serializer);
    }
}

impl SseEncode for crate::api::types::page_data::ComicEpPageData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.total, serializer);
        <i32>::sse_encode(self.limit, serializer);
        <i32>::sse_encode(self.page, serializer);
        <i32>::sse_encode(self.pages, serializer);
        <Vec<crate::api::types::comic_ep_entity::ComicEpEntity>>::sse_encode(self.docs, serializer);
    }
}

impl SseEncode for crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <crate::api::types::image_entity::ImageEntity>::sse_encode(self.media, serializer);
    }
}

impl SseEncode for crate::api::types::page_data::ComicEpPicturePageData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.total, serializer);
        <i32>::sse_encode(self.limit, serializer);
        <i32>::sse_encode(self.page, serializer);
        <i32>::sse_encode(self.pages, serializer);
        <Vec<crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity>>::sse_encode(
            self.docs, serializer,
        );
    }
}

impl SseEncode for crate::api::types::comic_info_entity::ComicInfoEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.title, serializer);
        <String>::sse_encode(self.author, serializer);
        <i32>::sse_encode(self.pages_count, serializer);
        <i32>::sse_encode(self.eps_count, serializer);
        <bool>::sse_encode(self.finished, serializer);
        <Vec<String>>::sse_encode(self.categories, serializer);
        <crate::api::types::image_entity::ImageEntity>::sse_encode(self.thumb, serializer);
        <i32>::sse_encode(self.likes_count, serializer);
        <crate::api::types::creator_entity::CreatorEntity>::sse_encode(self.creator, serializer);
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.chinese_team, serializer);
        <Vec<String>>::sse_encode(self.tags, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.updated_at, serializer);
        <String>::sse_encode(self.created_at, serializer);
        <bool>::sse_encode(self.allow_download, serializer);
        <i32>::sse_encode(self.views_count, serializer);
        <bool>::sse_encode(self.is_liked, serializer);
        <i32>::sse_encode(self.comments_count, serializer);
    }
}

impl SseEncode for crate::api::types::page_data::ComicPageData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.total, serializer);
        <i32>::sse_encode(self.limit, serializer);
        <i32>::sse_encode(self.page, serializer);
        <i32>::sse_encode(self.pages, serializer);
        <Vec<crate::api::types::comic_entity::ComicEntity>>::sse_encode(self.docs, serializer);
    }
}

impl SseEncode for crate::api::types::comic_search_entity::ComicSearchEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.author, serializer);
        <Vec<String>>::sse_encode(self.categories, serializer);
        <String>::sse_encode(self.chinese_team, serializer);
        <String>::sse_encode(self.created_at, serializer);
        <String>::sse_encode(self.description, serializer);
        <bool>::sse_encode(self.finished, serializer);
        <i64>::sse_encode(self.likes_count, serializer);
        <Vec<String>>::sse_encode(self.tags, serializer);
        <crate::api::types::image_entity::ImageEntity>::sse_encode(self.thumb, serializer);
        <String>::sse_encode(self.title, serializer);
        <Option<i64>>::sse_encode(self.total_likes, serializer);
        <Option<i64>>::sse_encode(self.total_views, serializer);
        <String>::sse_encode(self.updated_at, serializer);
    }
}

impl SseEncode for crate::api::types::page_data::ComicSearchPageData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.total, serializer);
        <i32>::sse_encode(self.limit, serializer);
        <i32>::sse_encode(self.page, serializer);
        <i32>::sse_encode(self.pages, serializer);
        <Vec<crate::api::types::comic_search_entity::ComicSearchEntity>>::sse_encode(
            self.docs, serializer,
        );
    }
}

impl SseEncode for crate::api::types::comment_user_entity::CommentUserEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.gender, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.title, serializer);
        <bool>::sse_encode(self.verified, serializer);
        <i64>::sse_encode(self.exp, serializer);
        <i64>::sse_encode(self.level, serializer);
        <Vec<String>>::sse_encode(self.characters, serializer);
        <crate::api::types::image_entity::ImageEntity>::sse_encode(self.avatar, serializer);
        <String>::sse_encode(self.role, serializer);
    }
}

impl SseEncode for crate::api::types::creator_entity::CreatorEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.gender, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.title, serializer);
        <Option<bool>>::sse_encode(self.verified, serializer);
        <i32>::sse_encode(self.exp, serializer);
        <i32>::sse_encode(self.level, serializer);
        <Vec<String>>::sse_encode(self.characters, serializer);
        <crate::api::types::image_entity::ImageEntity>::sse_encode(self.avatar, serializer);
        <String>::sse_encode(self.slogan, serializer);
        <String>::sse_encode(self.role, serializer);
        <String>::sse_encode(self.character, serializer);
    }
}

impl SseEncode for crate::api::error::custom_error::CustomError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::error::custom_error::CustomErrorType>::sse_encode(self.error_code, serializer);
        <String>::sse_encode(self.error_message, serializer);
    }
}

impl SseEncode for crate::api::error::custom_error::CustomErrorType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::error::custom_error::CustomErrorType::BadRequest => 0,
                crate::api::error::custom_error::CustomErrorType::ParameterError => 1,
                crate::api::error::custom_error::CustomErrorType::ParseJsonError => 2,
                crate::api::error::custom_error::CustomErrorType::UnKnownError => 3,
                crate::api::error::custom_error::CustomErrorType::ParseError => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::utils::client::HttpExpectBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::utils::client::HttpExpectBody::Text => 0,
                crate::api::utils::client::HttpExpectBody::Bytes => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::utils::client::HttpResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.headers, serializer);
        <u16>::sse_encode(self.status_code, serializer);
        <crate::api::utils::client::HttpResponseBody>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::api::utils::client::HttpResponseBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::utils::client::HttpResponseBody::Text(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::utils::client::HttpResponseBody::Bytes(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::types::image_entity::ImageEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.file_server, serializer);
        <String>::sse_encode(self.original_name, serializer);
        <String>::sse_encode(self.path, serializer);
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::types::comic_comment_entity::ComicCommentEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::comic_comment_entity::ComicCommentEntity>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::types::comic_entity::ComicEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::comic_entity::ComicEntity>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::types::comic_ep_entity::ComicEpEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::comic_ep_entity::ComicEpEntity>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::comic_ep_picture_entity::ComicEpPictureEntity>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::types::comic_search_entity::ComicSearchEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::comic_search_entity::ComicSearchEntity>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::types::login_entity::LoginEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.token, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::utils::client::HttpExpectBody> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::utils::client::HttpExpectBody>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<(String, String)>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<(String, String)>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::types::profile_entity::ProfileEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.gender, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.title, serializer);
        <bool>::sse_encode(self.verified, serializer);
        <i32>::sse_encode(self.exp, serializer);
        <i32>::sse_encode(self.level, serializer);
        <Vec<String>>::sse_encode(self.characters, serializer);
        <crate::api::types::image_entity::ImageEntity>::sse_encode(self.avatar, serializer);
        <String>::sse_encode(self.birthday, serializer);
        <String>::sse_encode(self.email, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.created_at, serializer);
        <bool>::sse_encode(self.is_punched, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.10.0.

    // Section: imports

    use super::*;
    use crate::api::types::sort::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_picacg_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSort(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sort>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_picacg_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSort(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sort>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.10.0.

    // Section: imports

    use super::*;
    use crate::api::types::sort::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSort(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sort>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSort(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sort>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;
